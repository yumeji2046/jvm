在jvm中类（（Object）class/interface/emum 而非对象）的加载、链接、初始化都是在程序运行期间完成的
    加载：在编译后的字节码文件加载到内存
    连接：
        验证：确保加载的类的正确性
        准备：为类的静态变量分配内存，并将其初始化为默认值。如int类型默值为 0
       解析：将类中的符号引用转化为直接引用
    初始化：为静态变量赋值而非默认值
jvm 与程序的生命周期
    jvm本身是一个进程，当你的程序执行了System.exit()方法
    程序执行结束
    程序执行过程中遇到异常或错误而终止
    由于操作系统异常导致jvm退出

Test2:
    常量在编译阶段会存入到调用这个常量的方法所在类的常量池中,本质上调用类并没有
    直接引用到定义这个常量的类，因此不会触发定义常量的类的初始化

Test3:
    当一个常量的值并非在编译期间可以确定，那么这个值就不会存放到调用这个类的常量池中，
    程序在运行是会主动使用这个常量所在的类，该类会被初始化。

Test4:
    静态代码块在类第一次初始化的时候才会被执行

    对于数组实例来说，其类型是由jvm在运行期动态生成的，为“[L” 加上数组元素的类型
Test5:
    当一个接口在初始化的时候不要求父接口也完成初始化
    只有在真正使用到父类接口的时候（比如引用接口中所定义的常量）才会初始化

